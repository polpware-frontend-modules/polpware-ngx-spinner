{"version":3,"file":"polpware-ngx-spinner.mjs","sources":["../../../../projects/polpware/ngx-spinner/src/lib/spinner/spinner-service-base.ts","../../../../projects/polpware/ngx-spinner/src/lib/spinner/spinner-service.impl.ts","../../../../projects/polpware/ngx-spinner/src/lib/spinner/loading-indicator.decorator.ts","../../../../projects/polpware/ngx-spinner/src/lib/spinner/spinner.interface.ts","../../../../projects/polpware/ngx-spinner/src/public_api.ts","../../../../projects/polpware/ngx-spinner/src/polpware-ngx-spinner.ts"],"sourcesContent":["import { INgxLogger } from '@polpware/ngx-logger';\nimport { ISpinnerService } from './spinner.interface';\n\nexport interface IUnderlyingSpinner {\n    show?(...args: any[]): void;\n    hide?(...args: any[]): void;\n\n    showAsync?(...args: any[]): Promise<any>;\n    hideAsync?(...args: any[]): Promise<any>;\n}\n\nexport const PRIMARY_SPINNER = 'primary';\n\nconst DismissingDelayPeroid = 300;\nconst DefaultShowingDelayPeroid = 500;\n\nexport abstract class SpinnerServiceBase implements ISpinnerService {\n\n    protected underlyingSpinner: IUnderlyingSpinner;\n    protected logger: INgxLogger;\n\n    private _showingTimer: any;\n    private _showingDelay: number;\n    private _dismissingDelay: number;\n    private _dismissingTimer: any;\n\n    protected spinnerState: boolean;\n    private _referenceCounter = 0;\n\n    constructor() {\n        this._showingTimer = 0;\n        this._showingDelay = DefaultShowingDelayPeroid;\n        this._dismissingDelay = DismissingDelayPeroid;\n        this._dismissingTimer = 0;\n\n        this.spinnerState = false;\n    }\n\n    public setDelay(seconds: number) {\n        this._showingDelay = seconds * 1000;\n    }\n\n    public setDismissDelay(seconds: number) {\n        this._dismissingDelay = seconds * 1000;\n    }\n\n    // Override\n    public show(...args: any[]) {\n        const isStopped = this.preShow();\n        if (isStopped) return;\n\n        this.logger.debug('Schedule for show');\n\n        // Otherwise, schdule to show the spinner.\n        if (this.underlyingSpinner.show) {\n            this._showingTimer = setTimeout(() => {\n\n                if (this._showingTimer) {\n                    // Clean up the timer\n                    this._showingTimer = 0;\n                    this.spinnerState = true;\n                    this.underlyingSpinner.show(...args);\n                }\n\n            }, this._showingDelay);\n        } else {\n            this._showingTimer = setTimeout(async () => {\n\n                if (this._showingTimer) {\n                    // Clean up the timer\n                    this._showingTimer = 0;\n                    this.spinnerState = true;\n                    await this.underlyingSpinner.showAsync(...args);\n                }\n\n            }, this._showingDelay);\n        }\n    }\n\n    public hide(...args: any[]) {\n\n        const isStopped = this.preHide();\n        if (isStopped) {\n            return;\n        }\n\n        if (this.underlyingSpinner.hide) {\n\n            // If have scheduled to dismiss the spinner,\n            // we better we schedule again.\n            if (this._dismissingTimer) {\n\n                this.logger.debug('Reschedule for dismissing');\n\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = setTimeout(() => {\n\n                    if (this._dismissingTimer) {\n                        // Clean up the timer\n                        this._dismissingTimer = 0;\n                        this.spinnerState = false;\n                        // Dismiss the spinner \n                        this.underlyingSpinner.hide(...args);\n                    }\n                }, this._dismissingDelay);\n\n                return;\n            }\n\n            // Schedule to dismiss the spinner\n\n            if (this.spinnerState) {\n\n                this.logger.debug('Schedule for dismissing');\n\n                this._dismissingTimer = setTimeout(() => {\n\n                    if (this._dismissingTimer) {\n                        this._dismissingTimer = 0;\n                        this.spinnerState = false;\n                        // Dismiss the spinner \n                        this.underlyingSpinner.hide(...args);\n                    }\n                }, this._dismissingDelay);\n            }\n        } else {\n            // If have scheduled to dismiss the spinner,\n            // we better we schedule again.\n            if (this._dismissingTimer) {\n\n                this.logger.debug('Reschedule for dismissing');\n\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = setTimeout(async () => {\n\n                    if (this._dismissingTimer) {\n                        // Clean up the timer\n                        this._dismissingTimer = 0;\n                        this.spinnerState = false;\n                        // Dismiss the spinner \n                        await this.underlyingSpinner.hideAsync(...args);\n                    }\n                }, this._dismissingDelay);\n\n                return;\n            }\n\n            // Schedule to dismiss the spinner\n\n            if (this.spinnerState) {\n\n                this.logger.debug('Schedule for dismissing');\n\n                this._dismissingTimer = setTimeout(async () => {\n\n                    if (this._dismissingTimer) {\n                        this._dismissingTimer = 0;\n                        this.spinnerState = false;\n                        // Dismiss the spinner \n                        await this.underlyingSpinner.hideAsync(...args);\n                    }\n                }, this._dismissingDelay);\n            }\n        }\n    }\n\n    protected preShow() {\n        this.logger.debug('Spinner requested to show');\n\n        this._referenceCounter++;\n\n        this.logger.debug('Reference counter in show:' + this._referenceCounter);\n\n        // If there is one already, use it.\n        if (this.spinnerState) {\n\n            this.logger.debug('Existing spinner used');\n\n            // However, we need to cancel the dismiss timer.\n            // It is safe, because we expect that \"hide\" is to be called\n            // sometime later from this moment on.\n            if (this._dismissingTimer) {\n\n                this.logger.debug('Dismissing timer cleaned 1');\n\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = 0;\n            }\n\n            return true;\n        }\n\n        // If we have already scheduled to dismiss the spinner,\n        // we just need to clear the scheduler.\n        // Please refer to the above for the reason.\n        if (this._dismissingTimer) {\n\n            this.logger.debug('Dismissing timer cleaned 2');\n\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = 0;\n        }\n\n        // If we have already scheduled to show the spinner, we just\n        // use this schedule. \n        if (this._showingTimer) {\n\n            this.logger.debug('Already scheduled to show');\n\n            return true;\n        }\n        return false;\n    }\n\n    protected preHide() {\n        this.logger.debug('Spinner requested to hide');\n\n        this._referenceCounter--;\n\n        this.logger.debug('Reference counter in hide:' + this._referenceCounter);\n\n        if (this._referenceCounter > 0) {\n\n            return true;\n        }\n\n        // If the spinner has not been scheduled.\n        if (this._showingTimer) {\n\n            this.logger.debug('Showed timer cleaned');\n\n            clearTimeout(this._showingTimer);\n            this._showingTimer = 0;\n\n            // Done\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { LoggerProviderImpl } from '@polpware/ngx-logger';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Subscription } from 'rxjs';\r\nimport { SpinnerServiceBase } from './spinner-service-base';\r\n\r\nconst PRIMARY_SPINNER = 'primary';\r\n\r\n/* Note that on purpose we do not turn this one into a singular service. \r\n * Therefore, we are able to create many such services for each component */\r\n\r\n@Injectable()\r\nexport class SpinnerServiceImpl extends SpinnerServiceBase {\r\n\r\n    private _subr: Subscription;\r\n\r\n    constructor(protected readonly underlyingSpinner: NgxSpinnerService,\r\n        loggerProvider: LoggerProviderImpl) {\r\n        super();\r\n\r\n        this.logger = loggerProvider.logger('polpware_ngx_spinner');\r\n    }\r\n\r\n    // Note that we do not need to stop it, as this is a service starting in the beginning.\r\n    public startToListenSpinner(name: string = PRIMARY_SPINNER) {\r\n        // Set up the listener\r\n        this._subr = this.underlyingSpinner.getSpinner(name).subscribe(x => {\r\n            this.spinnerState = x.show;\r\n        });\r\n    }\r\n\r\n    public stopListener(name: string = PRIMARY_SPINNER) {\r\n        this._subr && this._subr.unsubscribe();\r\n    }\r\n\r\n}\r\n\r\n","import { ILoadingIndicator } from '../interfaces/indicators.interface';\r\nimport { ISpinnerService } from './spinner.interface';\r\n\r\ninterface IDecoratorPrerequisite {\r\n    spinner: ISpinnerService;\r\n}\r\n\r\ntype DecoratorPrequisiteClass = { new(...args: any[]): IDecoratorPrerequisite };\r\n\r\nexport function loadingIndicatorDecorator<T extends DecoratorPrequisiteClass>(constructor: T) {\r\n    return class extends constructor implements ILoadingIndicator {\r\n\r\n        public showLoadingIndicator(...args: any[]) {\r\n            this.spinner.show(...args);\r\n        }\r\n\r\n        public hideLoadingIndicator(...args: any[]) {\r\n            this.spinner.hide(...args);\r\n        }\r\n\r\n        public setLoadingIndicatorDelay(seconds: number) {\r\n            this.spinner.setDelay(seconds);\r\n        }\r\n    };\r\n}\r\n","export interface ISpinnerService {\r\n    show(...args: any[]): void;\r\n    hide(...args: any[]): void;\r\n    setDelay(seconds: number): void;\r\n}\r\n\r\nexport class NullSpinner implements ISpinnerService {\r\n    show() { }\r\n    hide() { }\r\n    setDelay(seconds: number) { }\r\n}\r\n","/*\n * Public API Surface of ngx-spinner\n */\n\nexport * from './lib/spinner/spinner-service.impl';\nexport * from './lib/spinner/loading-indicator.decorator';\nexport * from './lib/spinner/spinner.interface';\nexport * from './lib/interfaces/indicators.interface';\nexport * from './lib/spinner/spinner-service-base';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["PRIMARY_SPINNER"],"mappings":"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"}