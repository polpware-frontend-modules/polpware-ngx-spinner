{"version":3,"file":"polpware-ngx-spinner.js.map","sources":["ng://@polpware/ngx-spinner/lib/spinner/spinner-service.impl.ts","ng://@polpware/ngx-spinner/lib/spinner/loading-indicator.decorator.ts","ng://@polpware/ngx-spinner/lib/spinner/spinner.interface.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { startWith } from 'rxjs/operators';\r\n\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\nimport {\r\n    ISpinnerService\r\n} from './spinner.interface';\r\n\r\nconst DismissingDelayPeroid = 300;\r\nconst DefaultShowingDelayPeroid = 500;\r\n\r\n@Injectable()\r\nexport class SpinnerServiceImpl implements ISpinnerService {\r\n\r\n    private _showingTimer: any;\r\n    private _showingDelay: number;\r\n    private _dismissingTimer: any;\r\n\r\n    private _spinnerState: boolean;\r\n\r\n    constructor(private _underlyingSpinner: NgxSpinnerService) {\r\n        this._showingTimer = null;\r\n        this._showingDelay = DefaultShowingDelayPeroid;\r\n        this._dismissingTimer = null;\r\n\r\n        this._spinnerState = false;\r\n        // Set up the listener\r\n        this._underlyingSpinner.spinnerObservable\r\n            .pipe(startWith(false))\r\n            .subscribe(x => {\r\n                this._spinnerState = x;\r\n            });\r\n    }\r\n\r\n    public setDelay(seconds: number) {\r\n        this._showingDelay = seconds * 1000;\r\n    }\r\n\r\n    // Override\r\n    public show(title: string = 'Loading ...') {\r\n        // If there is one already, use it.\r\n\r\n        if (this._spinnerState) {\r\n\r\n            // However, we need to cancel the dismiss timer.\r\n            // It is safe, because we expect that \"hide\" is to be called\r\n            // sometime later from this moment on.\r\n            if (this._dismissingTimer) {\r\n                clearTimeout(this._dismissingTimer);\r\n                this._dismissingTimer = 0;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // If we have already scheduled to dismiss the spinner,\r\n        // we just need to clear the scheduler.\r\n        // Please refer to the above for the reason.\r\n        if (this._dismissingTimer) {\r\n            clearTimeout(this._dismissingTimer);\r\n            this._dismissingTimer = 0;\r\n            return;\r\n        }\r\n\r\n        // If we have already scheduled to show the spinner, we just\r\n        // use this schedule. \r\n        if (this._showingTimer) {\r\n            return;\r\n        }\r\n\r\n        // Otherwise, schdule to show the spinner.\r\n        this._showingTimer = setTimeout(() => {\r\n            // Clean up the timer\r\n            this._showingTimer = null;\r\n            this._underlyingSpinner.show();\r\n\r\n        }, this._showingDelay);\r\n\r\n    }\r\n\r\n    public hide() {\r\n        // If the spinner has not been rendered.\r\n        if (this._showingTimer) {\r\n            clearTimeout(this._showingTimer);\r\n            this._showingTimer = null;\r\n            return;\r\n        }\r\n\r\n        // If have scheduled to dismiss the spinner,\r\n        // we better we schedule again.\r\n        if (this._dismissingTimer) {\r\n            clearTimeout(this._dismissingTimer);\r\n            this._dismissingTimer = setTimeout(() => {\r\n                // Clean up the timer\r\n                this._dismissingTimer = null;\r\n\r\n                // Dismiss the spinner \r\n                this._underlyingSpinner.hide();\r\n            }, DismissingDelayPeroid);\r\n\r\n            return;\r\n        }\r\n\r\n        // Schedule to dismiss the spinner\r\n\r\n        if (this._spinnerState) {\r\n            this._dismissingTimer = setTimeout(() => {\r\n\r\n                // Dismiss the spinner \r\n                this._underlyingSpinner.hide();\r\n\r\n            }, DismissingDelayPeroid);\r\n        }\r\n    }\r\n}\r\n\r\n","import { ILoadingIndicator } from '../interfaces/indicators.interface';\r\nimport { ISpinnerService } from './spinner.interface';\r\n\r\ninterface IDecoratorPrerequisite {\r\n    spinner: ISpinnerService;\r\n}\r\n\r\ntype DecoratorPrequisiteClass = { new(...args: any[]): IDecoratorPrerequisite };\r\n\r\nexport function loadingIndicatorDecorator<T extends DecoratorPrequisiteClass>(constructor: T) {\r\n    return class extends constructor implements ILoadingIndicator {\r\n\r\n        public showLoadingIndicator(...args: any[]) {\r\n            this.spinner.show(...args);\r\n        }\r\n\r\n        public hideLoadingIndicator() {\r\n            this.spinner.hide();\r\n        }\r\n\r\n        public setLoadingIndicatorDelay(seconds: number) {\r\n            this.spinner.setDelay(seconds);\r\n        }\r\n    };\r\n}\r\n","export interface ISpinnerService {\r\n    show(...args: any[]);\r\n    hide(...args: any[]);\r\n    setDelay(seconds: number);\r\n}\r\n\r\nexport class NullSpinner implements ISpinnerService {\r\n    show() { }\r\n    hide() { }\r\n    setDelay(seconds: number) { }\r\n}\r\n"],"names":[],"mappings":"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"}
