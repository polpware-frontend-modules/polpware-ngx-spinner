{"version":3,"file":"polpware-ngx-spinner.js","sources":["ng://@polpware/ngx-spinner/lib/spinner/spinner-service-base.ts","ng://@polpware/ngx-spinner/lib/spinner/spinner-service.impl.ts","ng://@polpware/ngx-spinner/lib/spinner/loading-indicator.decorator.ts","ng://@polpware/ngx-spinner/lib/spinner/spinner.interface.ts","ng://@polpware/ngx-spinner/public_api.ts","ng://@polpware/ngx-spinner/polpware-ngx-spinner.ts"],"sourcesContent":["import { INgxLogger } from '@polpware/ngx-logger';\nimport { ISpinnerService } from './spinner.interface';\n\nexport interface IUnderlyingSpinner {\n    show?(...args: any[]): void;\n    hide?(...args: any[]): void;\n\n    showAsync?(...args: any[]): Promise<any>;\n    hideAsync?(...args: any[]): Promise<any>;\n}\n\nexport const PRIMARY_SPINNER = 'primary';\n\nconst DismissingDelayPeroid = 300;\nconst DefaultShowingDelayPeroid = 500;\n\nexport abstract class SpinnerServiceBase implements ISpinnerService {\n\n    protected underlyingSpinner: IUnderlyingSpinner;\n    protected logger: INgxLogger;\n\n    private _showingTimer: any;\n    private _showingDelay: number;\n    private _dismissingTimer: any;\n\n    protected spinnerState: boolean;\n    private _referenceCounter = 0;\n\n    constructor() {\n        this._showingTimer = 0;\n        this._showingDelay = DefaultShowingDelayPeroid;\n        this._dismissingTimer = 0;\n\n        this.spinnerState = false;\n    }\n\n    public setDelay(seconds: number) {\n        this._showingDelay = seconds * 1000;\n    }\n\n    // Override\n    public show(...args: any[]) {\n        const isStopped = this.preShow();\n        if (isStopped) return;\n\n        this.logger.debug('Schedule for show');\n\n        // Otherwise, schdule to show the spinner.\n        if (this.underlyingSpinner.show) {\n            this._showingTimer = setTimeout(() => {\n\n                if (this._showingTimer) {\n                    // Clean up the timer\n                    this._showingTimer = 0;\n                    this.underlyingSpinner.show(...args);\n                    this.spinnerState = true;\n                }\n\n            }, this._showingDelay);\n        } else {\n            this._showingTimer = setTimeout(async () => {\n\n                if (this._showingTimer) {\n                    // Clean up the timer\n                    this._showingTimer = 0;\n                    await this.underlyingSpinner.showAsync(...args);\n                    this.spinnerState = true;\n                }\n\n            }, this._showingDelay);\n        }\n    }\n\n    public hide(...args: any[]) {\n\n        const isStopped = this.preHide();\n        if (isStopped) {\n            return;\n        }\n\n        if (this.underlyingSpinner.hide) {\n\n            // If have scheduled to dismiss the spinner,\n            // we better we schedule again.\n            if (this._dismissingTimer) {\n\n                this.logger.debug('Reschedule for dismissing');\n\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = setTimeout(() => {\n\n                    if (this._dismissingTimer) {\n                        // Clean up the timer\n                        this._dismissingTimer = 0;\n                        // Dismiss the spinner \n                        this.underlyingSpinner.hide(...args);\n                    }\n                }, DismissingDelayPeroid);\n\n                return;\n            }\n\n            // Schedule to dismiss the spinner\n\n            if (this.spinnerState) {\n\n                this.logger.debug('Schedule for dismissing');\n\n                this._dismissingTimer = setTimeout(() => {\n\n                    if (this._dismissingTimer) {\n\n                        this._dismissingTimer = 0;\n                        // Dismiss the spinner \n                        this.underlyingSpinner.hide(...args);\n                        this.spinnerState = false;\n                    }\n                }, DismissingDelayPeroid);\n            }\n        } else {\n            // If have scheduled to dismiss the spinner,\n            // we better we schedule again.\n            if (this._dismissingTimer) {\n\n                this.logger.debug('Reschedule for dismissing');\n\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = setTimeout(async () => {\n\n                    if (this._dismissingTimer) {\n                        // Clean up the timer\n                        this._dismissingTimer = 0;\n                        // Dismiss the spinner \n                        await this.underlyingSpinner.hideAsync(...args);\n                    }\n                }, DismissingDelayPeroid);\n\n                return;\n            }\n\n            // Schedule to dismiss the spinner\n\n            if (this.spinnerState) {\n\n                this.logger.debug('Schedule for dismissing');\n\n                this._dismissingTimer = setTimeout(async () => {\n\n                    if (this._dismissingTimer) {\n\n                        this._dismissingTimer = 0;\n                        // Dismiss the spinner \n                        await this.underlyingSpinner.hideAsync(...args);\n                        this.spinnerState = false;\n                    }\n                }, DismissingDelayPeroid);\n            }\n        }\n    }\n\n    protected preShow() {\n        this.logger.debug('Spinner requested to show');\n\n        this._referenceCounter++;\n\n        this.logger.debug('Reference counter in show:' + this._referenceCounter);\n\n        // If there is one already, use it.\n        if (this.spinnerState) {\n\n            this.logger.debug('Existing spinner used');\n\n            // However, we need to cancel the dismiss timer.\n            // It is safe, because we expect that \"hide\" is to be called\n            // sometime later from this moment on.\n            if (this._dismissingTimer) {\n\n                this.logger.debug('Dismissing timer cleaned 1');\n\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = 0;\n            }\n\n            return true;\n        }\n\n        // If we have already scheduled to dismiss the spinner,\n        // we just need to clear the scheduler.\n        // Please refer to the above for the reason.\n        if (this._dismissingTimer) {\n\n            this.logger.debug('Dismissing timer cleaned 2');\n\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = 0;\n        }\n\n        // If we have already scheduled to show the spinner, we just\n        // use this schedule. \n        if (this._showingTimer) {\n\n            this.logger.debug('Already scheduled to show');\n\n            return true;\n        }\n        return false;\n    }\n\n    protected preHide() {\n        this.logger.debug('Spinner requested to hide');\n\n        this._referenceCounter--;\n\n        this.logger.debug('Reference counter in hide:' + this._referenceCounter);\n\n        if (this._referenceCounter > 0) {\n\n            return true;\n        }\n\n        // If the spinner has not been scheduled.\n        if (this._showingTimer) {\n\n            this.logger.debug('Showed timer cleaned');\n\n            clearTimeout(this._showingTimer);\n            this._showingTimer = 0;\n\n            // Done\n            return true;\n        }\n\n        // If have scheduled to dismiss the spinner,\n        // we better we schedule again.\n        if (this._dismissingTimer) {\n\n            this.logger.debug('Reschedule for dismissing');\n\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = setTimeout(() => {\n\n                if (this._dismissingTimer) {\n                    // Clean up the timer\n                    this._dismissingTimer = 0;\n                    // Dismiss the spinner \n                    this.underlyingSpinner.hide(name);\n                }\n            }, DismissingDelayPeroid);\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { LoggerProviderImpl } from '@polpware/ngx-logger';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Subscription } from 'rxjs';\r\nimport { SpinnerServiceBase } from './spinner-service-base';\r\n\r\nconst PRIMARY_SPINNER = 'primary';\r\n\r\n/* Note that on purpose we do not turn this one into a singular service. \r\n * Therefore, we are able to create many such services for each component */\r\n\r\n@Injectable()\r\nexport class SpinnerServiceImpl extends SpinnerServiceBase {\r\n\r\n    private _subr: Subscription;\r\n\r\n    constructor(protected readonly underlyingSpinner: NgxSpinnerService,\r\n        loggerProvider: LoggerProviderImpl) {\r\n        super();\r\n\r\n        this.logger = loggerProvider.logger('polpware_ngx_spinner');\r\n    }\r\n\r\n    // Note that we do not need to stop it, as this is a service starting in the beginning.\r\n    public startToListenSpinner(name: string = PRIMARY_SPINNER) {\r\n        // Set up the listener\r\n        this._subr = this.underlyingSpinner.getSpinner(name).subscribe(x => {\r\n            this.spinnerState = x.show;\r\n        });\r\n    }\r\n\r\n    public stopListener(name: string = PRIMARY_SPINNER) {\r\n        this._subr && this._subr.unsubscribe();\r\n    }\r\n\r\n}\r\n\r\n","import { ILoadingIndicator } from '../interfaces/indicators.interface';\r\nimport { ISpinnerService } from './spinner.interface';\r\n\r\ninterface IDecoratorPrerequisite {\r\n    spinner: ISpinnerService;\r\n}\r\n\r\ntype DecoratorPrequisiteClass = { new(...args: any[]): IDecoratorPrerequisite };\r\n\r\nexport function loadingIndicatorDecorator<T extends DecoratorPrequisiteClass>(constructor: T) {\r\n    return class extends constructor implements ILoadingIndicator {\r\n\r\n        public showLoadingIndicator(...args: any[]) {\r\n            this.spinner.show(...args);\r\n        }\r\n\r\n        public hideLoadingIndicator(...args: any[]) {\r\n            this.spinner.hide(...args);\r\n        }\r\n\r\n        public setLoadingIndicatorDelay(seconds: number) {\r\n            this.spinner.setDelay(seconds);\r\n        }\r\n    };\r\n}\r\n","export interface ISpinnerService {\r\n    show(...args: any[]): void;\r\n    hide(...args: any[]): void;\r\n    setDelay(seconds: number): void;\r\n}\r\n\r\nexport class NullSpinner implements ISpinnerService {\r\n    show() { }\r\n    hide() { }\r\n    setDelay(seconds: number) { }\r\n}\r\n","/*\n * Public API Surface of ngx-spinner\n */\n\nexport * from './lib/spinner/spinner-service.impl';\nexport * from './lib/spinner/loading-indicator.decorator';\nexport * from './lib/spinner/spinner.interface';\nexport * from './lib/interfaces/indicators.interface';\nexport * from './lib/spinner/spinner-service-base';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["PRIMARY_SPINNER"],"mappings":"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"}